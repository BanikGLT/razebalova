#!/usr/bin/env python3
"""
Telegram UserBot –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç pyrofork –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
"""

import asyncio
import logging
import sys
from pyrogram import Client, filters
from pyrogram.types import Message
# from pyrogram.enums import MessageServiceType  # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç–∞–∫ –∫–∞–∫ GIFT –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å

from config import API_ID, API_HASH, PHONE_NUMBER, SESSION_NAME, DEBUG
from gift_handler import GiftHandler
from gift_detector import AdvancedGiftDetector

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO if not DEBUG else logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('userbot.log'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

class TelegramGiftBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å userbot –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        self.client = None
        self.gift_handler = None
        self.is_running = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not API_ID or not API_HASH:
                logger.error("API_ID –∏ API_HASH –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Pyrogram
            self.client = Client(
                SESSION_NAME,
                api_id=API_ID,
                api_hash=API_HASH,
                phone_number=PHONE_NUMBER
            )
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤
            self.gift_handler = GiftHandler(self.client)
            self.gift_detector = AdvancedGiftDetector()
            
            logger.info("UserBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ userbot"""
        try:
            if not await self.initialize():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await self.client.start()
            self.is_running = True
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            me = await self.client.get_me()
            logger.info(f"UserBot –∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {me.first_name} (@{me.username})")
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.register_handlers()
            
            logger.info("üéÅ UserBot –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–∞—Ä–∫–æ–≤!")
            logger.info("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ 24/7. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self.run_forever()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        finally:
            await self.stop()
    
    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        @self.client.on_message()
        async def universal_message_handler(client: Client, message: Message):
            """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤"""
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤
                detection_result = await self.gift_detector.detect_gift(message)
                
                if detection_result["is_gift"]:
                    logger.info(f"üéÅ –ü–û–î–ê–†–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù! ID: {message.id}")
                    logger.info(f"–ú–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è: {detection_result['detection_method']}")
                    logger.info(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {detection_result['confidence']:.2f}")
                    
                    # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∞—Ä–∫–∞
                    asyncio.create_task(self.gift_handler.process_gift(message))
                    
                elif DEBUG and message.service:
                    # –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                    logger.debug(f"–°–ª—É–∂–µ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.service}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        
        @self.client.on_message(filters.private & ~filters.service)
        async def handle_private_message(client: Client, message: Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤)"""
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–ª—è –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                detection_result = await self.gift_detector.detect_gift(message)
                
                if detection_result["is_gift"]:
                    logger.info(f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –ª–∏—á–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ID: {message.id}")
                    logger.info(f"–ú–µ—Ç–æ–¥: {detection_result['detection_method']}, –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {detection_result['confidence']:.2f}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∞—Ä–æ–∫
                    asyncio.create_task(self.gift_handler.process_gift(message))
                    
                elif DEBUG and message.text:
                    logger.debug(f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text[:50]}...")
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
    async def run_forever(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            # –ñ–¥–µ–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            while self.is_running:
                await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (Ctrl+C)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ userbot"""
        try:
            self.is_running = False
            
            if self.client:
                await self.client.stop()
                logger.info("UserBot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = TelegramGiftBot()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)