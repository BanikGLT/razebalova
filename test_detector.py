#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
"""

import asyncio
import logging
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

class MockMessage:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, **kwargs):
        self.id = kwargs.get('id', 12345)
        self.text = kwargs.get('text', None)
        self.service = kwargs.get('service', None)
        self.media = kwargs.get('media', None)
        self.raw = kwargs.get('raw', None)
        self.from_user = kwargs.get('from_user', None)
        
    def __str__(self):
        return f"MockMessage(id={self.id}, text='{self.text}', service={self.service})"

async def test_gift_detection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤"""
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    try:
        from gift_detector import AdvancedGiftDetector
        detector = AdvancedGiftDetector()
    except ImportError:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å AdvancedGiftDetector")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {
            "name": "Service —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 'gift'",
            "message": MockMessage(service="MessageServiceType.GIFT", text=None)
        },
        {
            "name": "–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–∞—Ä–∫–æ–º",
            "message": MockMessage(text="–ü—Ä–∏–≤–µ—Ç! –Ø –¥–∞—Ä—é —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫ üéÅ", service=None)
        },
        {
            "name": "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å gift",
            "message": MockMessage(text="Here is your gift from me!", service=None)
        },
        {
            "name": "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥–∞—Ä–∫–∞",
            "message": MockMessage(text="–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", service=None)
        },
        {
            "name": "Service —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ø–æ–¥–∞—Ä–∫–∞",
            "message": MockMessage(service="MessageServiceType.JOIN", text=None)
        },
        {
            "name": "–°–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –ø–æ–¥–∞—Ä–∫–∞",
            "message": MockMessage(text="üéÅüéÅüéÅ", service=None)
        }
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤")
    print("=" * 50)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['name']}")
        print("-" * 30)
        
        try:
            result = await detector.detect_gift(test_case['message'])
            
            if result['is_gift']:
                print(f"‚úÖ –ü–û–î–ê–†–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù!")
                print(f"   –ú–µ—Ç–æ–¥: {result['detection_method']}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
                print(f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {result['gift_info']}")
            else:
                print(f"‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
                
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞:")
    stats = detector.get_detection_stats()
    for key, value in stats.items():
        print(f"   {key}: {value}")

async def test_keywords():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
    print("=" * 30)
    
    try:
        from gift_detector import AdvancedGiftDetector
        detector = AdvancedGiftDetector()
        
        print("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤:")
        for i, keyword in enumerate(detector.gift_keywords, 1):
            print(f"  {i}. '{keyword}'")
            
        print(f"\n–ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è service —Å–æ–æ–±—â–µ–Ω–∏–π:")
        for i, pattern in enumerate(detector.service_patterns, 1):
            print(f"  {i}. '{pattern}'")
            
    except ImportError:
        print("–î–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üéÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤ Telegram")
    print("=" * 60)
    
    await test_keywords()
    await test_gift_detection()
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üí° –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python3 start.py")

if __name__ == "__main__":
    asyncio.run(main())