#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
–ë–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç pyrogram
"""

import asyncio

class MockMessage:
    """–ú–æ–∫-–æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, **kwargs):
        self.id = kwargs.get('id', 12345)
        self.text = kwargs.get('text', None)
        self.service = kwargs.get('service', None)
        self.media = kwargs.get('media', None)
        self.raw = kwargs.get('raw', None)
        self.from_user = kwargs.get('from_user', None)
        
    def __str__(self):
        return f"MockMessage(id={self.id}, text='{self.text}', service={self.service})"

class SimpleGiftDetector:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏"""
    
    def __init__(self):
        self.gift_keywords = [
            'gift', '–ø–æ–¥–∞—Ä–æ–∫', 'present', 'üéÅ', '–¥–∞—Ä—é', '–ø–æ–¥–∞—Ä–∏–ª', 
            '–ø–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ–∫', '–≤—Ä—É—á–µ–Ω–∏–µ', '–Ω–∞–≥—Ä–∞–¥–∞', '–ø—Ä–∏–∑'
        ]
        
        self.service_patterns = [
            'gift', 'present', 'award', 'prize'
        ]
    
    async def detect_gift(self, message):
        """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        result = {
            "is_gift": False,
            "confidence": 0.0,
            "detection_method": None,
            "gift_info": {}
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ service —Å–æ–æ–±—â–µ–Ω–∏–π
        if message.service:
            service_str = str(message.service).lower()
            for pattern in self.service_patterns:
                if pattern in service_str:
                    result.update({
                        "is_gift": True,
                        "confidence": 0.9,
                        "detection_method": "service_message",
                        "gift_info": {"pattern": pattern}
                    })
                    return result
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
        if message.text:
            text_lower = message.text.lower()
            matched_keywords = []
            
            for keyword in self.gift_keywords:
                if keyword in text_lower:
                    matched_keywords.append(keyword)
            
            if matched_keywords:
                confidence = min(0.8, len(matched_keywords) * 0.3)
                result.update({
                    "is_gift": True,
                    "confidence": confidence,
                    "detection_method": "text_analysis",
                    "gift_info": {"keywords": matched_keywords}
                })
                return result
        
        return result

async def test_detection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤"""
    detector = SimpleGiftDetector()
    
    test_cases = [
        {
            "name": "Service —Å–æ–æ–±—â–µ–Ω–∏–µ —Å 'gift'",
            "message": MockMessage(service="MessageServiceType.GIFT")
        },
        {
            "name": "–¢–µ–∫—Å—Ç —Å –ø–æ–¥–∞—Ä–∫–æ–º",
            "message": MockMessage(text="–ü—Ä–∏–≤–µ—Ç! –Ø –¥–∞—Ä—é —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫ üéÅ")
        },
        {
            "name": "English gift",
            "message": MockMessage(text="Here is your gift!")
        },
        {
            "name": "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message": MockMessage(text="–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?")
        },
        {
            "name": "–¢–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏",
            "message": MockMessage(text="üéÅüéÅüéÅ")
        }
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–æ–≤")
    print("=" * 50)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['name']}")
        print("-" * 30)
        
        result = await detector.detect_gift(test_case['message'])
        
        if result['is_gift']:
            print(f"‚úÖ –ü–û–î–ê–†–û–ö –û–ë–ù–ê–†–£–ñ–ï–ù!")
            print(f"   –ú–µ—Ç–æ–¥: {result['detection_method']}")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f}")
            print(f"   –î–µ—Ç–∞–ª–∏: {result['gift_info']}")
        else:
            print(f"‚ùå –ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")

async def main():
    print("üéÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–≤")
    print("=" * 50)
    
    await test_detection()
    
    print(f"\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìù –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    asyncio.run(main())