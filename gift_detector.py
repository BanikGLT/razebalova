#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ Telegram
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
"""

import logging
import json
from typing import Dict, Any, Optional, List
from pyrogram.types import Message

logger = logging.getLogger(__name__)

class AdvancedGiftDetector:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤
        self.gift_keywords = [
            'gift', '–ø–æ–¥–∞—Ä–æ–∫', 'present', 'üéÅ', '–¥–∞—Ä—é', '–ø–æ–¥–∞—Ä–∏–ª', 
            '–ø–æ–ª—É—á–∏–ª –ø–æ–¥–∞—Ä–æ–∫', '–≤—Ä—É—á–µ–Ω–∏–µ', '–Ω–∞–≥—Ä–∞–¥–∞', '–ø—Ä–∏–∑'
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è service —Å–æ–æ–±—â–µ–Ω–∏–π
        self.service_patterns = [
            'gift', 'present', 'award', 'prize'
        ]
        
    async def detect_gift(self, message: Message) -> Dict[str, Any]:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        """
        detection_result = {
            "is_gift": False,
            "confidence": 0.0,
            "detection_method": None,
            "gift_info": {},
            "raw_data": {}
        }
        
        try:
            # –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ service —Å–æ–æ–±—â–µ–Ω–∏–π
            service_result = await self._check_service_message(message)
            if service_result["detected"]:
                detection_result.update({
                    "is_gift": True,
                    "confidence": service_result["confidence"],
                    "detection_method": "service_message",
                    "gift_info": service_result["info"]
                })
                return detection_result
            
            # –ú–µ—Ç–æ–¥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            text_result = await self._check_text_content(message)
            if text_result["detected"]:
                detection_result.update({
                    "is_gift": True,
                    "confidence": text_result["confidence"],
                    "detection_method": "text_analysis",
                    "gift_info": text_result["info"]
                })
                return detection_result
            
            # –ú–µ—Ç–æ–¥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            media_result = await self._check_media_content(message)
            if media_result["detected"]:
                detection_result.update({
                    "is_gift": True,
                    "confidence": media_result["confidence"],
                    "detection_method": "media_analysis",
                    "gift_info": media_result["info"]
                })
                return detection_result
            
            # –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ raw –¥–∞–Ω–Ω—ã—Ö
            raw_result = await self._check_raw_data(message)
            if raw_result["detected"]:
                detection_result.update({
                    "is_gift": True,
                    "confidence": raw_result["confidence"],
                    "detection_method": "raw_data",
                    "gift_info": raw_result["info"]
                })
                return detection_result
            
            logger.debug("–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ –≤—Ö–æ–¥—è—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ –ø–æ–¥–∞—Ä–∫–∞: {e}")
        
        return detection_result
    
    async def _check_service_message(self, message: Message) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ service —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        result = {"detected": False, "confidence": 0.0, "info": {}}
        
        try:
            if not message.service:
                return result
            
            service_str = str(message.service).lower()
            logger.debug(f"–ê–Ω–∞–ª–∏–∑ service —Å–æ–æ–±—â–µ–Ω–∏—è: {service_str}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
            for pattern in self.service_patterns:
                if pattern in service_str:
                    result.update({
                        "detected": True,
                        "confidence": 0.9,
                        "info": {
                            "service_type": str(message.service),
                            "pattern_matched": pattern,
                            "method": "service_pattern_match"
                        }
                    })
                    logger.info(f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ service –ø–∞—Ç—Ç–µ—Ä–Ω: {pattern}")
                    break
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ service —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        return result
    
    async def _check_text_content(self, message: Message) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        result = {"detected": False, "confidence": 0.0, "info": {}}
        
        try:
            if not message.text:
                return result
            
            text_lower = message.text.lower()
            matched_keywords = []
            
            # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            for keyword in self.gift_keywords:
                if keyword in text_lower:
                    matched_keywords.append(keyword)
            
            if matched_keywords:
                confidence = min(0.8, len(matched_keywords) * 0.3)
                result.update({
                    "detected": True,
                    "confidence": confidence,
                    "info": {
                        "matched_keywords": matched_keywords,
                        "text_preview": message.text[:100],
                        "method": "text_keyword_match"
                    }
                })
                logger.info(f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç: {matched_keywords}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
        
        return result
    
    async def _check_media_content(self, message: Message) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–∞—Ä–∫–æ–≤"""
        result = {"detected": False, "confidence": 0.0, "info": {}}
        
        try:
            if not message.media:
                return result
            
            media_str = str(message.media).lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–¥–∏–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ gift-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            if any(pattern in media_str for pattern in self.service_patterns):
                result.update({
                    "detected": True,
                    "confidence": 0.7,
                    "info": {
                        "media_type": str(type(message.media)),
                        "media_info": media_str[:200],
                        "method": "media_pattern_match"
                    }
                })
                logger.info(f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–µ–¥–∏–∞: {e}")
        
        return result
    
    async def _check_raw_data(self, message: Message) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ raw –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è"""
        result = {"detected": False, "confidence": 0.0, "info": {}}
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
            attributes_to_check = ['raw', '__dict__', '__str__']
            
            for attr_name in attributes_to_check:
                if hasattr(message, attr_name):
                    try:
                        if attr_name == '__dict__':
                            attr_value = str(message.__dict__)
                        elif attr_name == '__str__':
                            attr_value = str(message)
                        else:
                            attr_value = str(getattr(message, attr_name))
                        
                        attr_lower = attr_value.lower()
                        
                        # –ò—â–µ–º gift-–ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
                        for pattern in self.service_patterns:
                            if pattern in attr_lower:
                                result.update({
                                    "detected": True,
                                    "confidence": 0.6,
                                    "info": {
                                        "attribute": attr_name,
                                        "pattern_matched": pattern,
                                        "data_preview": attr_value[:200],
                                        "method": "raw_data_pattern_match"
                                    }
                                })
                                logger.info(f"üéÅ –ü–æ–¥–∞—Ä–æ–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ {attr_name}")
                                return result
                                
                    except Exception as attr_error:
                        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ç—Ä–∏–±—É—Ç–∞ {attr_name}: {attr_error}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ raw –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return result
    
    def get_detection_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"""
        return {
            "total_keywords": len(self.gift_keywords),
            "total_patterns": len(self.service_patterns),
            "detection_methods": [
                "service_message",
                "text_analysis", 
                "media_analysis",
                "raw_data"
            ]
        }